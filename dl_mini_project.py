# -*- coding: utf-8 -*-
"""DL_mini_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n4I-3GhKvkxnUmyM1b3Al07TT48ORL8K
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install tensorflow

import numpy as np
import pandas as pd
import tensorflow as tf
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split

# Sample data (creepy and non-creepy statements)
data = pd.read_csv("https://raw.githubusercontent.com/Nishtha22Thakur/Dataset/main/DL%20Miniproject%20Data.csv")
creepy_samples = list(data.iloc[:,0])
creepy_samples = [x for x in creepy_samples if not(pd.isnull(x)) == True]
non_creepy_samples = list(data.iloc[:,1])
non_creepy_samples = [x for x in non_creepy_samples if not(pd.isnull(x)) == True]

# Labels: 1 for creepy, 0 for non-creepy
creepy_labels = [1] * len(creepy_samples)
non_creepy_labels = [0] * len(non_creepy_samples)

# Combine data and labels
all_samples = creepy_samples + non_creepy_samples
all_labels = creepy_labels + non_creepy_labels

# Tokenize the text data
max_words = 1000
tokenizer = Tokenizer(num_words=max_words, oov_token="<OOV>")
tokenizer.fit_on_texts(all_samples)

# Convert text to sequences
sequences = tokenizer.texts_to_sequences(all_samples)

# Pad sequences to make them of the same length
padded_sequences = pad_sequences(sequences, maxlen=20, padding='post', truncating='post')

# Convert labels to NumPy arrays
all_labels = np.array(all_labels)

# Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(padded_sequences, all_labels, test_size=0.2, random_state=42)

# Define the model
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=max_words, output_dim=16, input_length=20),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))

# Example usage
test_profile = ["I'll sleep with you forever."]
test_sequence = pad_sequences(tokenizer.texts_to_sequences(test_profile), maxlen=20, padding='post', truncating='post')
prediction = model.predict(test_sequence)

if prediction > 0.5:
    print("Creepy statement detected!")
else:
    print("No creepy statement found.")

import numpy as np
import tensorflow as tf
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split

# Sample data (creepy and non-creepy statements)
data = pd.read_csv("https://raw.githubusercontent.com/Nishtha22Thakur/Dataset/main/DL%20Miniproject%20Data.csv")
creepy_samples = list(data.iloc[:,0])
creepy_samples = [x for x in creepy_samples if not(pd.isnull(x)) == True]
non_creepy_samples = list(data.iloc[:,1])
non_creepy_samples = [x for x in non_creepy_samples if not(pd.isnull(x)) == True]

# Labels: 1 for creepy, 0 for non-creepy
creepy_labels = [1] * len(creepy_samples)
non_creepy_labels = [0] * len(non_creepy_samples)

# Combine data and labels
all_samples = creepy_samples + non_creepy_samples
all_labels = creepy_labels + non_creepy_labels

# Tokenize the text data
max_words = 1000
tokenizer = Tokenizer(num_words=max_words, oov_token="<OOV>")
tokenizer.fit_on_texts(all_samples)

# Convert text to sequences
sequences = tokenizer.texts_to_sequences(all_samples)

# Pad sequences to make them of the same length
padded_sequences = pad_sequences(sequences, maxlen=20, padding='post', truncating='post')

# Convert labels to NumPy arrays
all_labels = np.array(all_labels)

# Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(padded_sequences, all_labels, test_size=0.2, random_state=42)

# Define the model
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=max_words, output_dim=16, input_length=20),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))

# Example usage
test_profile = ["I'll watch you sleep forever."]
test_sequence = pad_sequences(tokenizer.texts_to_sequences(test_profile), maxlen=20, padding='post', truncating='post')
prediction = model.predict(test_sequence)

if prediction > 0.5:
    print("Creepy statement detected!")
else:
    print("No creepy statement found.")